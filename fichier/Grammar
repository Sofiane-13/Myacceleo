grammar org.xtext.UnivTlemcen.pfe.Pfe with org.eclipse.xtext.common.Terminals

generate pfe "http://www.xtext.org/UnivTlemcen/pfe/Pfe"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Application:
	'application' name=STRING '=>' packageName=STRING
	'{'
		(  ('version:' versionCode=INT '=>' versionName=STRING)?
		 & sdkVersion=ApplicationUsesSDK? // reference 
		)
		(model+=Model)*
		(vue+=Vue)*(controleur+=Controleur)+
	'}'
;

ApplicationUsesSDK:
	'sdk:' '{' {ApplicationUsesSDK}
		(   ('min:' minSdkVersion=INT ';')?
		  & ('max:' maxSdkVersion=INT ';')?
		  & ('target:' targetSdkVersion=INT ';')?
		)
	'}'
;


/***********************************************************************
 *                                                                     *
 * CONTROLEUR                                                          *
 *                                                                     *
 ***********************************************************************/
Controleur: 'Le controleur : {'		
	Fonctions //je dois avoir plusieurs  ==> fonctions (fonction+=Fonctions)* marche pas et aussi focntion=Fonction* 
'}';

Fonctions:
	AlerteFonction|RemplirTable
	 
;

RemplirTable:
	'RemplirTable' name=ID ':' 
	 'use' ':' utiliser=[InputItem] ';'
	 'End.'
; //raised 
AlerteFonction:
	'AlertFunction' name=ID ':'
    ('Message'':' message=STRING';')
   'End.';
   
/***********************************************************************
 *                                                                     *
 * VUE                                       *
 *                                                                     *
 ***********************************************************************/

Vue: 
     'La vue : {'	
       
        Elements
       
	         '}'
;

Elements:
	Bouton|Layout |Heading| Tab | StyleSheet |
	lists |Icons|CheckBox | Forms | RadioButton | AddItem  ;
 
 //onclique , longClique , styleListe

/***********************************************************************
 *                                                                     *
 * Styles                                                              *
 *                                                                     *
 ***********************************************************************/
StyleSheet:
	
	StyleBouton | InputStyle |image | FormLabelStyle
;

image:
	'image'  name=ID 
	('source' ':' source=  STRING ';' 
	) 'End.'
	
;

enum Colors :  
          white='white #ffffff'|red='red #ff0000'|moccasin='moccasin #ffe4b5'|
          green= 'green "#008000'|lightgray='lightgray #d3d3d3'|orangered='orangered #ff4500'|
          gold= 'gold  #ffd700' |floralwhite= 'floralwhite #fffaf0'| dodgerblue= 'dodgerblue #1e90ff'|
          deeppink= 'deeppink #ff1493'| darksalmon= 'darksalmon #e9967a' | darkorange='darkorange #ff8c00'|
          darkmagenta= 'darkmagenta #8b008b'  | darkgreen='darkgreen #006400'| darkgray='darkgray #a9a9a9'| 
          darkblue='darkblue #00008b'| crimson= 'crimson #dc143c' |chocolate='chocolate #d2691e'| 
          chartreuse='chartreuse #7fff00'|cadetblue= 'cadetblue #5f9ea0'  | brown = 'brown #a52a2a'|   
          blueviolet='blueviolet #8a2be2'|blue='blue #0000ff'| black= 'black #000000'|aquamarine='aquamarine #7fffd4'|
          aliceblue='aliceblue #f0f8ff'|yellow ='yellow ffff00'|peachpuff ='peachpuff #ffdab9'|none='none';

StyleBouton:
	'StyleButton'	(name=ID )? 
   ( 'height' ':'  height= INT ';'
     'Flex' ':' flex=INT ';'
     'FlexDirection' ':' flexDirection=JustifyContentType ';'
     'BackGroundColor' ':' BackGroundColor=Colors ';'
     'JustifyContent' ':' JustifyContent= JustifyContentType ';'
     'BorderRadium' ':' BorderRadium=INT ';')
   'End.'
   
;
 InputStyle:
	'InputStyle' (name=ID )? 	
	 ('height'  height= INT ';'
     'padding' ':' padding=INT ';'
     'marginRight' ':' marginRight=INT ';'
     'flex'':' flex=INT ';'
     'fontSize' ':' fontSize=INT ';'
     'borderWidth' ':'  borderWidth=INT ';'
     'borderColor'  ':' borderColor= Colors ';'
     'borderRadius' ':' borderRadius=INT ';'
     
     )
     'End.'
;
 FormLabelStyle:
	'FormLabelStyle' (name=ID)? 	
	 ('height'  height= INT ';'
      'width'   width= INT ';'
      'backgroundColor'  ':' backgroundColor= Colors ';')
     'End.'
;
 
 
/****************************************************************************
 *                                                                          *
 *Bouton,Layout ,Heading,Tab ,lists,Icons,CheckBox,Forms,RadioButton,AddItem*
 *                                                                          *
 ****************************************************************************/	
	
Forms:
	FormInput | FormLabel |InputItem
;
lists :
	list | listItem
;
Icons:
    Icone | SocialIcon
;
 
list :
  'list' (name=ID)?
   'End.'; 

listItem :
   'listItem ' ( name=ID)?
    'End.'; 

RadioButton: 
    'radioButton' (name=ID)?
	 'End.'
	;
	
CheckBox:
    'checkBox'  (name=ID)?
	  'End.'
    ;
    
FormInput:
	 'FormInput' (name=ID)?
	  'TypeText' text=TypeH? ';'
	  'End.'
	;
	

FormLabel:
      'FormLabel' (name=ID)?
	  'TypeText' text=TypeH? ';'
	  'Style'  Style=[FormLabelStyle]';'
	  'End.'
	;
	
InputItem:
	 'InputItem' (name=ID)?
	 'TextType'  text=TypeH? ';'
	 'Style' ':' Style=[InputStyle] ';'
	 'End.';
		   


Icone:
    'Icone' (name=ID)? 
	'Type' ':'  type=IconType ';'
	'End.'
	  ;


SocialIcon:
 'SocialIcon'  (name=ID)? 
  'Type' ':' type=SocialIconType ';'
  'Button' button=buttonType ';'
  'raised' raised=raisedType ';'
  //'OnPress' onpress=[Fonctions]|'none' ';'  //à revoir
  //'OnLongPress' onlongpress= [Fonctions]|'none' ';'
  'End.'
;
  		

Tab:	
 'Tab' ( name=ID)? title=STRING
  'text' ':' text=textType ';'
  'icon' ':' icon= Icone ';'
  'element' ':' elements+=Elements';' 
 'End.';


Heading:
     
     'Heading' ( name=ID)?   
     (    'Type' ':' type=TypeH? ';'   )
      'End.'
      ;


Layout:
	'Layout' name=ID ':'
	 (
	'contient' ':' contient+=[Elements] (',' contient+= [Elements])* ';'
	 )
   'End.'
;
Bouton:
 'Button' name=ID ':'
 ( 
    'icon' ':' icon=[Icone] ';'
    'Use' ':' utiliser+=[Fonctions] (',' utiliser+= [Fonctions])*';'
    'LongUse' ':' utiliser+=[Fonctions] (',' utiliser+= [Fonctions])*';'//reference est une relation entre bouton et Fonctions //[Fonctions]
    'Style' ':' Style=[StyleBouton]  ';'
    'Raised/Large' ':' Prop=PropType ';'
    'IconRight' ':' IconRight=IconRightType ';'
 ) 
 'End.';


 // les composants par exemple : Horloge ()
AddItem:
 'AddItem' name=ID ':'
 ('icon' ':' icon=IconType ';'

 'text' ':' text =STRING ';') 'End.';

/***********************************************************************
 *                                                                     *
 * MODEL                                          *
 *                                                                     *
***********************************************************************/

Model: 'Le model : {'	
	Les_Model
'}';
Les_Model :
	Table
	| View
	| Trigger
	| Index
;

Table returns TableDefinition: 
	{Table} 'create' temporary?='temp'? 'table' name=ID  NbreColumn=INT '(' 
		columnDefs+=ColumnDef (',' columnDefs+=ColumnDef)* 
		(',' constraints+=TableConstraint)* ')';
	TableConstraint:
	UniqueTableConstraint | PrimaryConstraint | ForeignConstraint
;

	
UniqueTableConstraint: 
	('constraint' name=ID)? 'unique' '(' columns+=IndexedColumn (',' columns+=IndexedColumn)* ')' 
;

PrimaryConstraint: 
	('constraint' name=ID)? 'primary key' '(' columns+=IndexedColumn (',' columns+=IndexedColumn)* ')' 
;

ForeignConstraint:
	('constraint' name=ID)? 'foreign key' '(' columns+=IndexedColumn (',' columns+=IndexedColumn)* ')' 
;

IndexedColumn:
	columnReference=[ColumnDef] ('collate' collationName=ID)? (asc?='asc'|desc?='desc')?;
	
View returns TableDefinition: 
	{View}
	'create' temporary?='temp'? 'view' name=ID ;
	
Trigger: 
	'create' temporary?='temp'? 'trigger' name=ID when=('before'|'after'|'instead of')?
	  (eventType='delete'|eventType='insert'|eventType='update' ('of' updateColumnNames+=ID (',' updateColumnNames+=ID)*)?)
;
Index:
	'create' unique?=('unique')? 'index' name=ID 'on' table=[TableDefinition|ID]
;
ColumnDef returns ColumnSource:
	{ColumnDef}
	name=ID type=ColumnType constraints+=ColumnConstraint*;

ColumnConstraint:
	{PrimaryKeyColumnConstraint} 'primary key' (asc?='asc'|desc?='desc')? autoincrement?='autoincrement'? 
;



/***********************************************************************
 *                                                                     *
 * Emunerated                                         *
 *                                                                     *
 ***********************************************************************/
 
  
 enum ColumnType:
	text | integer | real | blob | boolean |none
;
 
enum textType:STRING | INT ; 
enum TypeH:h1 | h2 | h3 | h4 |fontFamily; 		 
enum IconType :octicon='octicon' | material='material' | 
               community='community'|  //à revoir
               zocial='zocial'| ionicon='ionicon' | 
               foundation='foundation' |evilicon='evilicon' | entypo='entypo'|none='none'; 
	           
enum SocialIconType :facebook='facebook' | twitter='twitter'| 
                     pinterest='pinterest'|linkedin='linkedin'| youtube='youtube'|
                     vimeo='vimeo'| tumblr='tumblr'|instagram='instagram'| 
                     quora='quora'| foursquare='foursquare'| wordpress='wordpress'|	
                     stumbleupon='stumbleupon'| github='github'| twitch=' twitch'| 
                     medium='medium'| soundcloud='soundcloud'|gitlab='gitlab'| 
                     angellist='angellist'| codepen='codepen'|none='none';	
enum buttonType :true='true'|false='false';
enum raisedType :true='true'|false='false'; 
enum animation : Start='Start' | Stop='Stop' ;     
enum PropType   :raised='raised' | large='large';   
enum IconRightType :true='true'|false='false';
enum JustifyContentType : center='center'|none='none';
enum fondWeightType:bold |row |none;      
/***********************************************************************
 *                                                                     *
 * DATATYPE & TERMINAL RULES                                           *
 *                                                                     *
 ***********************************************************************/
 
// 
//SignedNumber returns ecore::EBigDecimal:
//	'-'?NUMBER
//;	
//
//QualifiedName:
//	ID ("." ID)*;
//	
//terminal INT returns ecore::EInt: ('0'..'9')+;
//
//terminal NUMBER returns ecore::EBigDecimal:
//	('0'..'9')* ('.' ('0'..'9')+)?;
//		
//terminal STRING	: 
//			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
//			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
//		; 
//

